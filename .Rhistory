install.packages("rmarkdown")
install.packages("rmarkdown")
?lm
?rq
library(quantreg)
?rq
taus <- 1:9/10
taus
#
#library(learnr)
#library(psych)
library(ggplot2)
library(GGally)
library(lubridate)
library(dplyr)
library(quantreg)
library(forecast)
library(tidyquant)
library(timetk)
library(quantmod)
library(matrixStats)
#
symbols <- c("TAN", "ICLN", "PBW") #c("ENE", "REP", "")
price_tbl <- tq_get(symbols) %>% select(date, symbol, price = adjusted)
head(price_tbl)
# long format ("TIDY") price tibble for possible other work
return_tbl <- price_tbl %>% group_by(symbol) %>% tq_transmute(mutate_fun = periodReturn, period = "daily", type = "log", col_rename = "daily_return") %>% mutate(abs_return = abs(daily_return))
head(return_tbl)
#
r_2 <- return_tbl %>% select(symbol, date, daily_return) %>% spread(symbol, daily_return)
head(r_2)
r_2 <- xts(r_2, r_2$date)[-1, ]
head(r_2)
storage.mode(r_2) <- "numeric"
r_2 <- r_2[, -1]
head(r_2)
r_corr <- apply.monthly(r_2, FUN = cor)[,c(2, 3, 6)]
colnames(r_corr) <- c("TAN_ICLN", "TAN_PBW", "ICLN_PBW")
r_vols <- apply.monthly(r_2, FUN = colSds)
head(r_corr)
head(r_vols)
#
corr_tbl <- r_corr %>% as_tibble() %>% mutate(date = index(r_corr)) %>% gather(key = assets, value = corr, -date)
vols_tbl <- r_vols %>% as_tibble() %>% mutate(date = index(r_vols)) %>% gather(key = assets, value = vols, -date)
#
corr_vols <- merge(r_corr, r_vols)
corr_vols_tbl <- corr_vols %>% as_tibble() %>% mutate(date = index(corr_vols))
head(corr_vols_tbl)
library(Quandl)
#
library(tidyquant)
library(tidyverse)
library(forecast)
#
currencies <- c("JPY/USD", "EUR/USD", "CNY/USD", "GBP/USD")
ex_rates <- tq_get(currencies)
ex_rates <- tq_get(currencies, get = "exchange.rates", from = "2000-01-01")
str(ex_rates)
#
symbols <- c("JPY/USD", "EUR/USD", "CNY/USD", "GBP/USD")
price_tbl <- tq_get(symbols, get = "exchange.rates", from = "2019-01-01") %>% select(date, symbol, price = exchange.rate)
# long format ("TIDY") price tibble for possible other work
return_tbl <- price_tbl %>% group_by(symbol) %>% tq_transmute(mutate_fun = periodReturn, period = "daily", type = "log", col_rename = "daily_return") %>% mutate(abs_return = abs(daily_return))
library(dplyr)
# long format ("TIDY") price tibble for possible other work
return_tbl <- price_tbl %>% group_by(symbol) %>% tq_transmute(mutate_fun = periodReturn, period = "daily", type = "log", col_rename = "daily_return") %>% mutate(abs_return = abs(daily_return))
library(dplyr)
install.package("dplyr")
install.packages("dplyr")
install.packages("dplyr")
#
library(tidyquant)
library(dplyr)
#
library(tidyquant)
library(tidyverse)
library(forecast)
library(dplyr)
#
symbols <- c("JPY/USD", "EUR/USD", "CNY/USD", "GBP/USD")
price_tbl <- tq_get(symbols, get = "exchange.rates", from = "2019-01-01") %>% select(date, symbol, price = exchange.rate)
# long format ("TIDY") price tibble for possible other work
return_tbl <- price_tbl %>% group_by(symbol) %>% tq_transmute(mutate_fun = periodReturn, period = "daily", type = "log", col_rename = "daily_return") %>% mutate(abs_return = abs(daily_return))
#str(return_tbl)
r_2 <- return_tbl %>% select(symbol, date, daily_return) %>% spread(symbol, daily_return)
r_2 <- xts(r_2, r_2$date)[-1, ]
storage.mode(r_2) <- "numeric"
r_2 <- r_2[, -1]
r_corr <- apply.monthly(r_2, FUN = cor)[,c(2, 3, 6)]
colnames(r_corr) <- c("TAN_ICLN", "TAN_PBW", "ICLN_PBW")
r_vols <- apply.monthly(r_2, FUN = colSds)
#
corr_tbl <- r_corr %>% as_tibble() %>% mutate(date = index(r_corr)) %>% gather(key = assets, value = corr, -date)
vols_tbl <- r_vols %>% as_tibble() %>% mutate(date = index(r_vols)) %>% gather(key = assets, value = vols, -date)
#
corr_vols <- merge(r_corr, r_vols)
corr_vols_tbl <- corr_vols %>% as_tibble() %>% mutate(date = index(corr_vols))
#render site
rmarkdown::render_site()
# set wd
setwd("~/0-business-statistics/00-stat-thinking/stat-thinking")
#render site
rmarkdown::render_site()
# set wd
setwd("~/0-business-statistics/00-stat-thinking/stat-thinking")
#render site
rmarkdown::render_site()
#render site
rmarkdown::render_site()
# set wd
setwd("~/0-business-statistics/00-stat-thinking/stat-thinking")
#render site
rmarkdown::render_site()
# set wd
setwd("~/0-business-statistics/00-stat-thinking/stat-thinking")
#render site
rmarkdown::render_site()
install.packages("rmarkdown")
install.packages("rmarkdown")
